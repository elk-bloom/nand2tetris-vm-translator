To eliminate redundant instructions (such as the address register being set to the address of stack pointer), the parser (responsible for reading the input virtual machine instructions) should keep track of what is in the A register and what is in the D register. I think I need to encapsulate this functionality, separating it from the input reading of the parser. The parser will have, as a member, a struct, perhaps called InnerVMTranslator. This struct will have members: the last A register and the last D register. It will also have a method taking in a &str (the VM instruction) and returning a Str (the resulting assembly). Any references to instruction enums or structs, or command enums or structs, will take place entirely in this InnerVMTranslator, and the Parser struct itself (responsible for reading from the VM input file) will not reference them, just the InnerVMTranslator